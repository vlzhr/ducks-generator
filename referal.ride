{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let eggsAssetId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
let incubatorAddress = base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
let farmingAddress = base58'3PAETTtuW7aSiyKtn9GuML3RgtV1xdq1mQW'

let collectiveMasterAddress = base58'3PDktsxDVEcoobpEBJcausnKo4enhcWUDEF'

let ref20 = ["3PR66kMvUDE1QvYAg8r6e1xDX7QbnTV7JW5"]

func tryGetInteger(key: String) = {
    match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
}

func masterTryGetBoolean(key: String) = {
    match getBoolean(Address(collectiveMasterAddress), key) {
        case b:Boolean => b
        case _ => false
    }
}

func isValidAddress(address: String) = {
  match(addressFromString(address)) {
    case a: Address => true
    case _ => false
  }
}

func tryGetString(key: String) = {
    match getString(this, key) {
        case a:String => a
        case _ => ""
    }
}

func getRefMultiplier(refererAddress: String) = {
  if (ref20.indexOf(refererAddress) != unit) then {
    4
  } else {
    1
  }
}

@Callable(i)
func addRefKey(refererAddress: String, refererKey: String) = {
  if (i.caller != this) then {
    throw("admin only")
  } else {
    let refStateKey = "key_" + refererKey + "_refererAddress"
    if (tryGetString(refStateKey) == "") then {
      [
        StringEntry(refStateKey, refererAddress),
        StringEntry("address_" + refererAddress + "_refererKey_" + refererKey, refererKey)
      ]
    } else throw("The ref key \"" + refererKey + "\" is already registered")
  }
}

@Callable(i)
func refPayment(refererKey: String) = {
  let referalAddress = i.originCaller.toString()
  if (i.caller.bytes != incubatorAddress && i.caller.bytes != farmingAddress) then {
    throw("This method can be called only by farming and incubator dApps")
  } else if ((refererKey == "") && (tryGetString("address_" + referalAddress + "_referedBy") == "")) then {
    []
  } else if (masterTryGetBoolean("farm_"+referalAddress)) then {
    # blocked for collective farms
    []
  } else {

    let givenReferer = match getString(this, "key_" + refererKey + "_refererAddress") {
      case x: String => x  # if key was a real key
      case _ => refererKey  # if ket was an address
    }

    let refererAddress = match getString(this, "address_" + referalAddress + "_referedBy") {
      case x: String => x
      case _ => givenReferer
    } 

    let refAmount = i.payments[0].amount * getRefMultiplier(refererAddress)

    if (refererAddress.addressFromString() == unit) then {
      []
    } else {
      let refererAddressValue = refererAddress.addressFromStringValue() 
      let referalAddressValue = referalAddress.addressFromStringValue()
      let paymentForReferer = refAmount

      let refererEarnedReward = "address_" + refererAddress + "_earnedReward"
      let referalDeliveredReward = "referer_" + refererAddress + "_referal_" + referalAddress + "_deliveredReward"

      if (refererAddress == referalAddress) then {
        []
      } else {
        [
          StringEntry("address_" + referalAddress + "_referedBy", refererAddress), 
          IntegerEntry(refererEarnedReward, tryGetInteger(refererEarnedReward) + paymentForReferer),
          IntegerEntry(referalDeliveredReward, tryGetInteger(referalDeliveredReward) + paymentForReferer),
          IntegerEntry("referer_"+refererAddress+"_referal_"+referalAddress+"_amount", tryGetInteger("referer_"+refererAddress+"_referal_"+referalAddress+"_amount") + 1),
          ScriptTransfer(refererAddressValue, paymentForReferer, eggsAssetId)
        ]
      }
    }
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
