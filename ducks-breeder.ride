{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let delayForHatching = 2

let HatchingStarted = "BREEDING_STARTED"
let HatchingFinished = "BREEDING_FINISHED"

let incubatorAddress = base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'

let GENS = ["A", "B", "C", "D", "E", "F", "G"]
let MaxGeneration = 5
let Generations = ["G", "H", "I", "K", "L", "M", "N"]

let rebirthAddress = base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'

func getProcessStatusKey(address: String, txId: ByteVector) = {
  # stores the fact of hatching, 
  # if key exists = hatching started 
  # if false = not claimed
  # if true = claimed and nft id will be in the key of getDuckIdKey
  address + "_" + txId.toBase58String() +  "_status"
}

func getProcessFinishHeightKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_fh"
}

func getDuckParentKey(txId: ByteVector, parentNum: Int) = {
  "inittx_" + txId.toBase58String() + "_parent" + parentNum.toString()
}

func getDuckIdKey(address: String, txId: ByteVector) = {
  address + "_" + txId.toBase58String() +  "_di"
}

func getDuckStatsKey(genString: String) = {
  "stats_" + genString + "_amount"
}

func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func tryGetString(key: String) = {
    let val = match getString(this, key) {
        case b:String => b
        case _ => ""
    }
    val
}

func determineGeneration(g1: String, g2: String) = {
  let gIndex = max([Generations.indexOf(g1).value(), Generations.indexOf(g2).value()])
  Generations[gIndex + 1]
}

func getRandomNumber(variants: Int, txId: ByteVector, hatchingFinishHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(hatchingFinishHeight-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func getRandomGen(gen1: String, gen2: String, step: Int, txId: ByteVector, hatchingFinishHeight: Int) = {
  let randomNum = getRandomNumber(2, txId, hatchingFinishHeight, step)
  let gen = if (randomNum == 0) then gen1 else gen2
  gen
}

func generateDuck(txId: ByteVector, hatchingFinishHeight: Int) = {
  let colorRandom = getRandomNumber(4, txId, hatchingFinishHeight, 11)
  let color = if (colorRandom == 0) then "Y"
    else if (colorRandom == 1) then "G" 
    else if (colorRandom == 2) then "B" 
    else "R"

  let parent1Id = tryGetString(getDuckParentKey(txId, 1)).fromBase58String()
  let parent2Id = tryGetString(getDuckParentKey(txId, 2)).fromBase58String()

  let parent1Gen = assetInfo(parent1Id).value().name.split("")
  let parent2Gen = assetInfo(parent2Id).value().name.split("")

  let gen = "DUCK-" 
            + getRandomGen(parent1Gen[5], parent2Gen[5], 0, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[6], parent2Gen[6], 1, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[7], parent2Gen[7], 2, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[8], parent2Gen[8], 3, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[9], parent2Gen[9], 4, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[10], parent2Gen[10], 5, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[11], parent2Gen[11], 6, txId, hatchingFinishHeight)
            + getRandomGen(parent1Gen[12], parent2Gen[12], 7, txId, hatchingFinishHeight)
            + "-" + determineGeneration(parent1Gen[14], parent2Gen[14]) + color
    gen
}

func checkAssetInIncubator(assetId: String) = {
  let result = match getString(Address(incubatorAddress), assetId) {
    case b:String => true
    case _ => false
  }
  let result2 = match getString(this, assetId) {
    case c:String => true
    case _ => false
  }
  result || result2
}

func canBeBreeded(asset1Id: ByteVector, asset2Id: ByteVector) = {
  let asset1Gen = assetInfo(asset1Id).value().name.split("")
  let asset2Gen = assetInfo(asset2Id).value().name.split("")
  
  if (Generations.indexOf(asset1Gen[14]).value() >= MaxGeneration) then {
    "you can only breed ducks with generation " + Generations[MaxGeneration] + " and lower"
  } else {
    if (Generations.indexOf(asset2Gen[14]).value() >= MaxGeneration) then {
      "you can only breed ducks with generation " + Generations[MaxGeneration] + " and lower"
    } else {
      "true"
    }
  }
}

func isSymbolA(accumulated: Int, sym: String) = { if (sym == "A") then {accumulated+1} else {accumulated+0} }
func isSymbolB(accumulated: Int, sym: String) = { if (sym == "B") then {accumulated+1} else {accumulated+0} }
func isSymbolC(accumulated: Int, sym: String) = { if (sym == "C") then {accumulated+1} else {accumulated+0} }
func isSymbolD(accumulated: Int, sym: String) = { if (sym == "D") then {accumulated+1} else {accumulated+0} }
func isSymbolE(accumulated: Int, sym: String) = { if (sym == "E") then {accumulated+1} else {accumulated+0} }
func isSymbolF(accumulated: Int, sym: String) = { if (sym == "F") then {accumulated+1} else {accumulated+0} }
func isSymbolG(accumulated: Int, sym: String) = { if (sym == "G") then {accumulated+1} else {accumulated+0} }
func isSymbolH(accumulated: Int, sym: String) = { if (sym == "H") then {accumulated+1} else {accumulated+0} }

func getAmountOrClear(amount: String) = {
  if (amount.contains("0")) then {""} else {amount}
}

func getGen(assetName: String) = {
  # getGen("DUCK-ABCDDCBA-GY") -> 2A2B2C2D-G
  let genotype = assetName.drop(5).dropRight(3).split("")
  let generation = assetName.split("")[14]
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolA)) + "A") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolB)) + "B") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolC)) + "C") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolD)) + "D") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolE)) + "E") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolF)) + "F") +
  getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolG)) + "G") + getAmountOrClear(toString(FOLD<8>(genotype, 0, isSymbolH)) + "H") + "-" + generation
}

@Callable(i)
func startDuckBreeding() = {

  let firstAssetId = i.payments[0].value().assetId.value().toBase58String()
  let secondAssetId = i.payments[1].value().assetId.value().toBase58String()

  if (!(checkAssetInIncubator(firstAssetId) && checkAssetInIncubator(secondAssetId))) then {
    throw("You need to attach 2 valid NFT-ducks.")
  } else {
    if (tryGetInteger("asset_" + firstAssetId + "_children") > 0 || tryGetInteger("asset_" + secondAssetId + "_children") > 0) then {
      throw("One duck can be used for breeding only once in its lifetime.")
    } else {
      let breededStatus = canBeBreeded(firstAssetId.fromBase58String(), secondAssetId.fromBase58String())
      if (breededStatus != "true") then {
        throw("These ducks cannot be breeded: " + breededStatus)
      } else {
        [
          StringEntry(getDuckParentKey(i.transactionId, 1), firstAssetId),
          StringEntry(getDuckParentKey(i.transactionId, 2), secondAssetId),
          StringEntry(getProcessStatusKey(i.caller.toString(), i.transactionId), HatchingStarted),
          IntegerEntry(getProcessFinishHeightKey(i.caller.toString(), i.transactionId), height + delayForHatching)
        ]
      }
    }
  }
}


@Callable(i)
func finishDuckHatching(txIdStr: String) = {

  let txId = fromBase58String(txIdStr)
  let processStatusKey = getProcessStatusKey(i.caller.toString(), txId)
  let finishHeightKey = getProcessFinishHeightKey(i.caller.toString(), txId)
  let duckIdKey = getDuckIdKey(i.caller.toString(), txId)

  let processTxStatus = getStringValue(this, processStatusKey)
  let processFinishHeight = getIntegerValue(this, finishHeightKey)
  
  if (processTxStatus == HatchingFinished) then {
    let duckId = getStringValue(this, getDuckIdKey(i.caller.toString(), txId))
    throw("The duck was breeded and claimed already, here is the folowing: " + duckId)
  } else
    if (processFinishHeight > height) then throw("Breeding is not finished yet " + (processFinishHeight - height).toString() + " blocks remaining, it will take around " +  (processFinishHeight - height).toString() + " minutes")
    else {
      let duckGen = generateDuck(txId, processFinishHeight)
      let farmGen = getGen(duckGen)
      let description = "{\"genotype\": \"" + duckGen + "\", \"crossbreeding\": true}"

      let asset = Issue(duckGen, description, 1, 0, false, unit, processFinishHeight)
      let assetId = asset.calculateAssetId()

      let amount = tryGetInteger(getDuckStatsKey(duckGen)) + 1
      let quantity = tryGetInteger("stats_"+farmGen+"_quantity")
      let parent1Id = tryGetString(getDuckParentKey(txId, 1))
      let parent2Id = tryGetString(getDuckParentKey(txId, 2))

      [
        StringEntry(processStatusKey, HatchingFinished),
        StringEntry(duckIdKey, assetId.toBase58String()),
        StringEntry(assetId.toBase58String(), duckIdKey),
        IntegerEntry(getDuckStatsKey(duckGen), amount),
        IntegerEntry("stats_"+farmGen+"_quantity", quantity+1),
        IntegerEntry("asset_" + parent1Id + "_children", 1),
        IntegerEntry("asset_" + parent2Id + "_children", 1),
        asset,
        ScriptTransfer(i.caller, 1, assetId),
        ScriptTransfer(i.caller, 1, parent1Id.fromBase58String()),
        ScriptTransfer(i.caller, 1, parent2Id.fromBase58String())
      ]
    }
}

@Callable(i)
func reduceRarity(assetId: String, farmGen: String) = {
  let asset = assetId.fromBase58String()
  if (i.caller != Address(rebirthAddress) && i.caller != this) then {
    throw("admin or rebirth only")
  } else {
    let duckGen = assetInfo(asset).value().name
    [
      IntegerEntry(getDuckStatsKey(duckGen), tryGetInteger(getDuckStatsKey(duckGen)) - 1),
      IntegerEntry("stats_"+farmGen+"_quantity", tryGetInteger("stats_"+farmGen+"_quantity") - 1)
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        
